+
+
+
+
+
+
+
// 1. upon clicking on message button by user {fromUid} a new document is created in firestore with the following fileds
  // {participants: ['fromUid', 'toUid'], messages: []}

// 2. upon sending a message a new record gets appended to messeges fields (type array). e.g.
  // var chats = db.collection('chats').doc(chatId);

  // Atomically add a new message to the "messages" array field.
  const myMessage = {
    content: '',
    timestamp: '',
    fromUid: ''
  }
  var arrUnion = chats.update({
    messages: admin.firestore.FieldValue.arrayUnion(myMessage)
  });



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  import React from 'react';
  import { auth } from "../services/firebase";
  import { db } from "../services/firebase"

  class Chat extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        user: auth().currentUser,
        chats: [],
        content: '',
        readError: null,
        writeError: null
      };
    }

    componentDidMount = async() => {
      this.setState({ readError: null });
      try {
        db.ref("chats").on("value", snapshot => {
          let chats = [];
          snapshot.forEach((snap) => {
            chats.push(snap.val());
          });
          this.setState({ chats });
        });
      } catch (error) {
        this.setState({ readError: error.message });
      }
    }

    handleChange = (event) => {
      this.setState({
        content: event.target.value
      });
    }

    handleSubmit = async(event) => {
      event.preventDefault();
      this.setState({ writeError: null });
      try {
        await db.ref("chats").push({
          content: this.state.content,
          timestamp: Date.now(),
          uid: this.state.user.uid
        });
        this.setState({ content: '' });
      } catch (error) {
        this.setState({ writeError: error.message });
      }
    }

    render () {
      return (
        <div>
          <div className="chats">
            {this.state.chats.map(chat => {
              return <p key={chat.timestamp}>{chat.content}</p>
            })}
          </div>
          <form onSubmit={this.handleSubmit}>
            <input onChange={this.handleChange} value={this.state.content}></input>
            {this.state.error ? <p>{this.state.writeError}</p> : null}
            <button type="submit">Send</button>
          </form>
          <div>
            Login in as: <strong>{this.state.user.email}</strong>
          </div>
        </div>
      )
    }
  }
  export default Chat;
